
-----

Quality Of Service Simulation

Layout
------
	Main:
		One Server (Publisher, FN, TM, RV)
		One Router (FN)
		Two Clients (Subscriber, FN or part of router's FN? Need to check distinction for Mobility.)
	
	Secondary:
		One Server
		One Router
		One Client
	
	TCP
		(Completely different code, same data file and wires I guess)
		One Server
		One Router
		Two Clients

Experiment
----------
	The server is publishing a video. (Fixed, v. large file OR rapidly changing chunks on a single ID)
	The clients subscribe to the video.
	Through the protocol (I think?) the router is *passively/internally* a subscriber (Mobility: 'second' router is *actively* a subscriber)

	Monitor the traffic on the line between server and router.
	- 1x traffic in secondary case
	- 1-1.1x traffic in primary case - the server only needs to send the video data over the network as a single connection (Either "once", for large file, or still repeatedly for chunks)
	- 2x traffic in the TCP case - there are two connections each sending video data from the server towards a client
	
Existing
----
Auto-generated "deploy_originals"
- create 'devices', create 'click'/'tm' running on particular nodes
- create 'applications' using imported classes, that run on particular nodes for a fixed length of time

publisher.h (Imported class)
	(publisher.h says:)
	* 'A sample publisher application.'
	* When the publisher is started, it advertises root scope 00000000000 and schedules (at 0 seconds) an NS3 event. 
	* Each time this event is scheduled, the publisher will advertise a randomly generated information identifier.
	
subscriber.h (Imported class)
- Subscribes to scope 00000000000
- Logs anything it recieves.
- (Paired up with publisher, it should receive something every half second)

Random reference:
http://www.nsnam.org/docs/release/3.18/doxygen/tcp-large-transfer_8cc_source.html
- "Ask for ASCII and pcap traces of network traffic"
- Might be TCP specific.

"For instance, a video streamer would constantly publish different video chunks using the same Information ID" - api.pdf


New Work
--------

ns3_video_publisher_app.cc
- The "video_publisher" example started a CVLC stream
- Asks for 1500 bytes at a time - this is either "whenever the stream makes this much" (slow) or "more than is available, so as much as possible"

https://support.google.com/youtube/answer/2853702?hl=en
"Recommended Encoder Settings"
"720p"
1280x720
Video Bitrates
    Maximum 4000 Kbps
    Recommended 2500 Kbps
    Minimum 1500 Kbps

These are the rates I'll set the publisher to make data at.
May need to test or measure "how fast it generates them", but the data rate is all that should matter.

1500b per packet
2500000b per second

3/5000 seconds per packet
... ah.





Generating and Modifying
------------------------
Network layout - one of 'deploy_originals/cfg'

(repos) ./blackadder/deployment/deploy -c ./Information-Centric-Networking/ns3_scripts/blackadder-jc776/deploy_originals/cfg/QoS_single_client.cfg -s
("Generate click conf & ns3 cpp files for this network layout")

/tmp/000[...].conf, /tmp/topology.graphml into blackadder-jc776/conf/QoS_single_client/
/tmp/topology.cpp into blackadder-jc776/deploy_originals/cpp/QoS_single_client.cpp (Unused)
/tmp/topology.cpp into blackadder-jc776/QoS_single_client.cpp

Added lines to wscript:
    obj = bld.create_ns3_program('QoS_single_client', ['core', 'point-to-point', 'blackadder', 'applications'])
    obj.source = ['QoS_single_client.cpp', 'lib/ns3_video_publisher_app.cc','lib/subscriber.cc',]
"Add this cpp file as a program to run with ./waf --run QoS_single_client"
"This file depends on these 'application' class files"


[Modifications for "path independent"]

[Modifications for packet capture 'pcap']


Visualizing PCAP files
----------------------
what I want: PCAP to Graph(Throughput over Time)

https://ask.wireshark.org/questions/25662/question-on-linebreaks-on-output-from-tsharks-z-iostat-option
tshark -r pub-0-0.pcap -q -z io,stat,1

-r: Input file.
-q: Don't attempt to parse packets.
-z io,stat,N: Instead, aggregate per N seconds, output a "table" that I have to parse:
"

===================================================================
IO Statistics
Interval: 1.000 secs
Column #0: 
                |   Column #0    
Time            |frames|  bytes  
000.000-001.000       8      7428 
001.000-002.000       2      2104 
002.000-003.000       2      2104 
003.000-004.000       2      2104 
004.000-005.000       2      2104 
005.000-006.000       1        64
===================================================================
"

Pipe filters to parse:
    Remove lines before the data: tail -n +8
-E quote=d

echo "Time,Length" >lengths.csv && tshark -r pub-0-0.pcap -T fields -E separator=, -e frame.time_relative -e frame.len >>lengths.csv
./csvpy 

rs: set of dictionaries {'Time':0,'Length':1023}
round? times, sum lengths




-t "Time (/s),Throughput (B/s)"


PCAP -> CSV(time,data per time) -> graph?



http://raffy.ch/blog/2012/03/21/visualizing-packet-captures-for-fun-and-profit/

Downloaded:


(CSV to Graph Desc.)   http://afterglow.sf.net/
(Graph Desc. to Image) (apt) graphviz 




 Apt: "r-base" (possibly smaller: "r-base-core")
     Wireshark.

tshark -q -z 'io,stat,1' -r <PcapFile> > <StatisticsFile>
           ^ "aggregate in units of 1 sec"
        























Porting Blackadder and its dependencies to an OpenWRT router.
-----
To install Blackadder on a router, see README in Information-Centric-Networking/click_blackadder.
YOU DO NOT NEED TO INSTALL I-C-N/click: That is just an intermediate stage in creating click_blackadder.

Starting point:
a. "packages-on-openwrt" + tutorial Makefile there

b. click-only Makefile, last updated 2010 (4+ years)
	[1] https://github.com/openwrt-es/barrier-breaker-openwrt-packages/blob/master/net/click/Makefile

c. "blackadder-on-pc" instructions

Information-Centric-Networking/click:
	Combining the first two, to cross-compile Click (a) from local clone of repository (b)
	- SOURCE_URL in (a) no longer works
	- Starting point for "symbolic link these directories" for Blackadder
	
	
	
	
	
	
2. Adding Blackadder using (c)

Notes
------------
Aim so far:
Make a "Package Makefile"
that acts on symlinked Click and Blackadder repositories
that makes a single "cross-compiled installable ipkg"
when running "SDK Makefile".

OK.


EXCERPTS FROM PLACES

http://www.read.cs.ucla.edu/click/faq#how-do-i-cross-compile-userlevel-click
"How do I cross compile userlevel click?"

Looks OK. 

https://github.com/openwrt-es/barrier-breaker-openwrt-packages/blob/master/net/click
"Click for Barrier Breaker" cross-compiling does exist!
Script is very old - "DESCRIPTION" thing.


"If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'."


Blackadder installs into the Click folder
("Package Makefile" should do the same thing)


Dependencies from ba-on-pc all look like they're for compiling only or statically added
(So I shouldn't have to make more packages)

Directories:
	blackadder_openwrt/
		repos/
			click              Symlink to click repo
			blackadder         Symlink to blackadder repo
		Makefile               Equiv. of "Second Step"
		
I should either have a "general" makefile that does the whole "on PC" one (~ "first step")
or just put all those instructions into "second step"

Symlinks in Git work OK.
(Anyone else will have to remake them, but it shows where they're 'supposed' to go)


"./configure --enable-nsclick --enable-blackadder --disable-linuxmodule --prefix=$HOME/.../builds/click"

=>
./configure --disable-linuxmodule prefix??


"userlevel click" using Wifi? Example says it can
"Packaging a service" section looks useful.


"define Build/Configure
	(cd $(PKG_BUILD_DIR); \
		rm -rf config.{cache,status} ; \
		./configure \
			--prefix=/usr \
			--target=$(GNU_TARGET_NAME) \
			--host=$(GNU_HOST_NAME) \
			--build=$(GNU_BUILD_NAME) \
			--enable-tools=mixed \
			--enable-userlevel \
			--enable-wifi \
			--enable-fixincludes \
			--disable-linuxmodule \
	)
endef"






































http://wiki.fp7-pursuit.eu/uploads/f/f6/INFSO-ICT-257217_PURSUIT_D3.4_Integration_and_Demonstration_Plan.pdf

"the kernel version of the Blackadder implementation"
- What I've done so far for PC is the user-level version.

"i) Compile and strip Click for the selected target
ii) Compile and strip the kernel version of Blackadder for the selected target
iii) Enable required support so that the deployment script configures OpenWRT
nodes."

"and strip" - "remove statically linked but unusable bloat"

http://wiki.fp7-pursuit.eu/uploads/2/21/INFSO-ICT-257217_PURSUIT_D3.5_Final_integrated_prototype.pdf
^ mentions that an OpenWRT port (having achieved those steps) does exist, but doesn't say where to find it.
  
1. Sending files to router
  [1] http://unix.stackexchange.com/questions/106480/how-to-copy-files-from-one-machine-to-another-using-ssh
  [2] https://help.ubuntu.com/community/SSHFS
  
  Installation:
    sudo apt-get install sshfs
  
    "Add yourself to 'fuse' group" [2] - I used terminal method
  
  Test sending a file:
    Create working folders:
    (PC)
      $HOME/.../transfer_mount
    
    (Router)
      ~: root's home directory. Others might work if user accounts are set up.
      ~/transfer_test
      ~/transfer_test/existing
    
    (PC, transfer/)
      sshfs -o idmap=user root@192.168.1.1:/transfer_test $HOME/.../transfer_mount
      * "Mount transfer_test on router to transfer_mount on PC.
      * -o idmap: "files owned by the remote host (root@192) will appear on PC as owned by PC"
      
  
  
TEST
jack@galillean:~/Desktop/Project/transfer$ scp -r ~/Desktop/Project/transfer/testsend root@192.168.1.1:/transfer_test
root@192.168.1.1's password: 
file                                          100%    0     0.0KB/s   00:00

root@OpenWrt:~/transfer_test# ls
existing

^ Expected directory "testsend" to be on router...
  
